% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_stan_gq_rep_draws.R
\name{tar_stan_gq_rep_draws}
\alias{tar_stan_gq_rep_draws}
\title{Multiple runs of generated quantities per model with draws.}
\usage{
tar_stan_gq_rep_draws(
  name,
  stan_files,
  data = list(),
  fitted_params,
  batches = 1L,
  reps = 1L,
  combine = FALSE,
  compile = c("original", "copy"),
  quiet = TRUE,
  dir = NULL,
  include_paths = NULL,
  cpp_options = list(),
  stanc_options = list(),
  force_recompile = FALSE,
  seed = NULL,
  output_dir = NULL,
  sig_figs = NULL,
  parallel_chains = getOption("mc.cores", 1),
  threads_per_chain = NULL,
  variables = NULL,
  copy_data = character(0),
  tidy_eval = targets::tar_option_get("tidy_eval"),
  packages = targets::tar_option_get("packages"),
  library = targets::tar_option_get("library"),
  error = targets::tar_option_get("error"),
  memory = "transient",
  garbage_collection = TRUE,
  deployment = targets::tar_option_get("deployment"),
  priority = targets::tar_option_get("priority"),
  resources = targets::tar_option_get("resources"),
  storage = targets::tar_option_get("storage"),
  retrieval = targets::tar_option_get("retrieval"),
  cue = targets::tar_option_get("cue")
)
}
\arguments{
\item{data}{(multiple options) The data to use for the variables specified in
the \code{data} block of the Stan program. One of the following:
\itemize{
\item A named list of \R objects (like for RStan). Internally this list is then
written to JSON for CmdStan using \code{\link[cmdstanr:write_stan_json]{write_stan_json()}}.
\item A path to a data file compatible with CmdStan (JSON or \R dump). See the
appendices in the CmdStan manual for details on using these formats.
\item \code{NULL} or an empty list if the Stan program has no \code{data} block.
}}

\item{fitted_params}{(multiple options) The parameter draws to use. One of
the following:
\itemize{
\item A \link[cmdstanr]{CmdStanMCMC} or \link[cmdstanr]{CmdStanVB} fitted model object.
\item A \link[posterior:draws_array]{posterior::draws_array} (for MCMC) or \link[posterior:draws_matrix]{posterior::draws_matrix} (for
VB) object returned by CmdStanR's \code{\link[cmdstanr:fit-method-draws]{$draws()}} method.
\item A character vector of paths to CmdStan CSV output files.
}}

\item{batches}{Number of batches. Each batch is a branch target
that generates a dataset and runs the model \code{reps} times.}

\item{reps}{Number of replications per batch.}

\item{combine}{Logical, whether to create a target to
combine all the model results
into a single data frame downstream. Convenient, but
duplicates data.}

\item{compile}{Do compilation? The default is \code{TRUE}. If \code{FALSE}
compilation can be done later via the \code{\link[cmdstanr:model-method-compile]{$compile()}}
method.}

\item{seed}{(positive integer) A seed for the (P)RNG to pass to CmdStan.}

\item{output_dir}{(string) A path to a directory where CmdStan should write
its output CSV files. For interactive use this can typically be left at
\code{NULL} (temporary directory) since CmdStanR makes the CmdStan output
(posterior draws and diagnostics) available in \R via methods of the fitted
model objects. The behavior of \code{output_dir} is as follows:
\itemize{
\item If \code{NULL} (the default), then the CSV files are written to a temporary
directory and only saved permanently if the user calls one of the \verb{$save_*}
methods of the fitted model object (e.g.,
\code{\link[cmdstanr:fit-method-save_output_files]{$save_output_files()}}). These temporary
files are removed when the fitted model object is
\link[base:gc]{garbage collected} (manually or automatically).
\item If a path, then the files are created in \code{output_dir} with names
corresponding to the defaults used by \verb{$save_output_files()}.
}}

\item{sig_figs}{(positive integer) The number of significant figures used
when storing the output values. By default, CmdStan represent the output
values with 6 significant figures. The upper limit for \code{sig_figs} is 18.
Increasing this value will result in larger output CSV files and thus an
increased usage of disk space.}

\item{parallel_chains}{(positive integer) The \emph{maximum} number of MCMC chains
to run in parallel. If \code{parallel_chains} is not specified then the default
is to look for the option \code{"mc.cores"}, which can be set for an entire \R
session by \code{options(mc.cores=value)}. If the \code{"mc.cores"} option has not
been set then the default is \code{1}.}

\item{threads_per_chain}{(positive integer) If the model was
\link[cmdstanr:model-method-compile]{compiled} with threading support, the number of
threads to use in parallelized sections \emph{within} an MCMC chain (e.g., when
using the Stan functions \code{reduce_sum()} or \code{map_rect()}). This is in
contrast with \code{parallel_chains}, which specifies the number of chains to
run in parallel. The actual number of CPU cores used use is
\code{parallel_chains*threads_per_chain}. For an example of using threading see
the Stan case study \href{https://mc-stan.org/users/documentation/case-studies/reduce_sum_tutorial.html}{Reduce Sum: A Minimal Example}.}

\item{variables}{(character vector) The variables to read in. If \code{NULL} (the
default) then all variables are included.}

\item{copy_data}{Character vector of names of scalars in \code{data}.
These values will be inserted as columns in the output data frame
for each rep. Useful for simulation studies where you want to
check the results against some "true value" in the data. See the
\code{mcmc_rep} vignette for an example.}
}
\value{
\code{tar_stan_gq_rep_draws(name = x, stan_files = "y.stan")}
returns a list of \code{targets::tar_target()} objects:
\itemize{
\item \code{x_file_y}: reproducibly track the Stan model file.
\item \code{x_lines_y}: contents of the Stan model file.
Omitted if \code{compile = "original"}.
\item \code{x_data}: dynamic branching target with simulated datasets.
\item \code{x_y}: dynamic branching target with tidy data frames of draws.
\item \code{x}: combine all the model-specific draws targets into
a single data frame with columns to distinguish among the models.
Suppressed if \code{combine} is \code{FALSE}.
}
}
\description{
Targets to run generated quantities multiple times and
save only the draws from each run.
}
\details{
Most of the arguments are passed to the \verb{$compile()}
and \verb{$sample()} methods of the \code{CmdStanModel} class. If you
previously compiled the model in an upstream \code{\link[=tar_stan_compile]{tar_stan_compile()}}
target, then the model should not recompile.
}
\examples{
# First, write your Stan model file. Example:
# tar_stan_example_file() # Writes stantargets_example.stan
# Then in _targets.R, write the pipeline:
targets::tar_pipeline(
  tar_stan_mcmc(
    your_model,
    stan_files = c(x = "stantargets_example.stan"),
    data = tar_stan_example_data()
  ),
  tar_stan_gq_rep_draws(
    generated_quantities,
    stan_files = "stantargets_example.stan",
    data = tar_stan_example_data(),
    fitted_params = your_model_mcmc_x,
    batches = 2,
    reps = 2
  )
)
}
