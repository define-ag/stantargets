% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_stan_mle_rep_draws.R
\name{tar_stan_mle_rep_draws}
\alias{tar_stan_mle_rep_draws}
\title{Multiple optimization runs per model with draws.}
\usage{
tar_stan_mle_rep_draws(
  name,
  stan_files,
  data = list(),
  batches = 1L,
  reps = 1L,
  combine = TRUE,
  compile = c("original", "copy"),
  quiet = TRUE,
  dir = NULL,
  include_paths = NULL,
  cpp_options = list(),
  stanc_options = list(),
  force_recompile = FALSE,
  seed = NULL,
  refresh = NULL,
  init = NULL,
  save_latent_dynamics = FALSE,
  output_dir = NULL,
  algorithm = NULL,
  init_alpha = NULL,
  iter = NULL,
  sig_figs = NULL,
  tol_obj = NULL,
  tol_rel_obj = NULL,
  tol_grad = NULL,
  tol_rel_grad = NULL,
  tol_param = NULL,
  history_size = NULL,
  copy_data = character(0),
  variables = NULL,
  tidy_eval = targets::tar_option_get("tidy_eval"),
  packages = targets::tar_option_get("packages"),
  library = targets::tar_option_get("library"),
  error = targets::tar_option_get("error"),
  memory = targets::tar_option_get("memory"),
  garbage_collection = targets::tar_option_get("garbage_collection"),
  deployment = targets::tar_option_get("deployment"),
  priority = targets::tar_option_get("priority"),
  resources = targets::tar_option_get("resources"),
  storage = targets::tar_option_get("storage"),
  retrieval = targets::tar_option_get("retrieval"),
  cue = targets::tar_option_get("cue")
)
}
\arguments{
\item{data}{(multiple options) The data to use for the variables specified in
the \code{data} block of the Stan program. One of the following:
\itemize{
\item A named list of \R objects (like for RStan). Internally this list is then
written to JSON for CmdStan using \code{\link[cmdstanr:write_stan_json]{write_stan_json()}}.
\item A path to a data file compatible with CmdStan (JSON or \R dump). See the
appendices in the CmdStan manual for details on using these formats.
\item \code{NULL} or an empty list if the Stan program has no \code{data} block.
}}

\item{compile}{Do compilation? The default is \code{TRUE}. If \code{FALSE}
compilation can be done later via the \code{\link[cmdstanr:model-method-compile]{$compile()}}
method.}

\item{seed}{(positive integer) A seed for the (P)RNG to pass to CmdStan.}

\item{refresh}{(non-negative integer) The number of iterations between
printed screen updates. If \code{refresh = 0}, only error messages will be
printed.}

\item{init}{(multiple options) The initialization method to use for the
variables declared in the \code{parameters} block of the Stan program:
\itemize{
\item A real number \code{x>0}. This initializes \emph{all} parameters randomly between
\verb{[-x,x]} (on the \emph{unconstrained} parameter space);
\item The number \code{0}. This initializes \emph{all} parameters to \code{0};
\item A character vector of paths (one per chain) to JSON or Rdump files
containing initial values for all or some parameters. See
\code{\link[cmdstanr:write_stan_json]{write_stan_json()}} to write \R objects to JSON files compatible with
CmdStan.
\item A list of lists containing initial values for all or some parameters. For
MCMC the list should contain a sublist for each chain. For optimization and
variational inference there should be just one sublist. The sublists should
have named elements corresponding to the parameters for which you are
specifying initial values. See \strong{Examples}.
\item A function that returns a single list with names corresponding to the
parameters for which you are specifying initial values. The function can
take no arguments or a single argument \code{chain_id}. For MCMC, if the function
has argument \code{chain_id} it will be supplied with the chain id (from 1 to
number of chains) when called to generate the initial values. See
\strong{Examples}.
}}

\item{save_latent_dynamics}{(logical) Should auxiliary diagnostic information
about the latent dynamics be written to temporary diagnostic CSV files?
This argument replaces CmdStan's \code{diagnostic_file} argument and the content
written to CSV is controlled by the user's CmdStan installation and not
CmdStanR (for some algorithms no content may be written). The default
is \code{FALSE}, which is appropriate for almost every use case. To save the
temporary files created when \code{save_latent_dynamics=TRUE} see the
\code{\link[cmdstanr:fit-method-save_output_files]{$save_latent_dynamics_files()}}
method.}

\item{output_dir}{(string) A path to a directory where CmdStan should write
its output CSV files. For interactive use this can typically be left at
\code{NULL} (temporary directory) since CmdStanR makes the CmdStan output
(posterior draws and diagnostics) available in \R via methods of the fitted
model objects. The behavior of \code{output_dir} is as follows:
\itemize{
\item If \code{NULL} (the default), then the CSV files are written to a temporary
directory and only saved permanently if the user calls one of the \verb{$save_*}
methods of the fitted model object (e.g.,
\code{\link[cmdstanr:fit-method-save_output_files]{$save_output_files()}}). These temporary
files are removed when the fitted model object is
\link[base:gc]{garbage collected} (manually or automatically).
\item If a path, then the files are created in \code{output_dir} with names
corresponding to the defaults used by \verb{$save_output_files()}.
}}

\item{algorithm}{(string) The optimization algorithm. One of \code{"lbfgs"},
\code{"bfgs"}, or \code{"newton"}. The control parameters below are only available
for \code{"lbfgs"} and \verb{"bfgs}. For their default values and more details see
the CmdStan User's Guide. The default values can also be obtained by
running \code{cmdstanr_example(method="optimize")$metadata()}.}

\item{init_alpha}{(positive real) The initial step size parameter.}

\item{iter}{(positive integer) The maximum number of iterations.}

\item{sig_figs}{(positive integer) The number of significant figures used
when storing the output values. By default, CmdStan represent the output
values with 6 significant figures. The upper limit for \code{sig_figs} is 18.
Increasing this value will result in larger output CSV files and thus an
increased usage of disk space.}

\item{tol_obj}{(positive real) Convergence tolerance on changes in objective function value.}

\item{tol_rel_obj}{(positive real) Convergence tolerance on relative changes in objective function value.}

\item{tol_grad}{(positive real) Convergence tolerance on the norm of the gradient.}

\item{tol_rel_grad}{(positive real) Convergence tolerance on the relative norm of the gradient.}

\item{tol_param}{(positive real) Convergence tolerance on changes in parameter value.}

\item{history_size}{(positive integer) The size of the history used when
approximating the Hessian. Only available for L-BFGS.}

\item{copy_data}{Character vector of names of scalars in \code{data}.
These values will be inserted as columns in the output data frame
for each rep. Useful for simulation studies where you want to
check the results against some "true value" in the data. See the
\code{mcmc_rep} vignette for an example.}

\item{variables}{(character vector) The variables to read in. If \code{NULL} (the
default) then all variables are included.}
}
\value{
\code{tar_stan_mcmc_rep_draws(name = x, stan_files = "y.stan")}
returns a list of \code{targets::tar_target()} objects:
\itemize{
\item \code{x_file_y}: reproducibly track the Stan model file.
\item \code{x_lines_y}: contents of the Stan model file.
Omitted if \code{compile = "original"}.
\item \code{x_data}: dynamic branching target with simulated datasets.
\item \code{x_y}: dynamic branching target with tidy data frames of MLE draws.
\item \code{x}: combine all the model-specific draws targets into
a single data frame with columns to distinguish among the models.
Suppressed if \code{combine} is \code{FALSE}.
}
}
\description{
Targets to run vb multiple times and
save only the MLEs in a wide-form "draws" data frame.
}
\details{
Most of the arguments are passed to the \verb{$compile()}
and \verb{$sample()} methods of the \code{CmdStanModel} class. If you
previously compiled the model in an upstream \code{\link[=tar_stan_compile]{tar_stan_compile()}}
target, then the model should not recompile.
}
\examples{
# First, write your Stan model file. Example:
# tar_stan_example_file() # Writes stantargets_example.stan
# Then in _targets.R, write the pipeline:
targets::tar_pipeline(
  tar_stan_mle_rep_draws(
    your_model,
    stan_files = "stantargets_example.stan",
    data = tar_stan_example_data(),
    batches = 2,
    reps = 2
  )
)
}
