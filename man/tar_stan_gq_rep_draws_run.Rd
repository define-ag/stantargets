% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_stan_gq_rep_draws.R
\name{tar_stan_gq_rep_draws_run}
\alias{tar_stan_gq_rep_draws_run}
\title{Run a Stan model and return only the summaries.}
\usage{
tar_stan_gq_rep_draws_run(
  stan_file,
  stan_name,
  stan_path,
  data,
  fitted_params,
  compile,
  quiet,
  dir,
  include_paths,
  cpp_options,
  stanc_options,
  force_recompile,
  seed,
  output_dir,
  sig_figs,
  parallel_chains,
  threads_per_chain,
  variables,
  copy_data
)
}
\arguments{
\item{data}{(multiple options) The data to use for the variables specified in
the \code{data} block of the Stan program. One of the following:
\itemize{
\item A named list of \R objects (like for RStan). Internally this list is then
written to JSON for CmdStan using \code{\link[cmdstanr:write_stan_json]{write_stan_json()}}.
\item A path to a data file compatible with CmdStan (JSON or \R dump). See the
appendices in the CmdStan manual for details on using these formats.
\item \code{NULL} or an empty list if the Stan program has no \code{data} block.
}}

\item{fitted_params}{Symbol, name of a \code{CmdStanFit} object
computed in a previous target: for example, the
\verb{*_mcmc_*} target from \code{\link[=tar_stan_mcmc]{tar_stan_mcmc()}}. Must be a subclass
that \verb{$generate_quantities()} can accept as \code{fitted_params}.}

\item{compile}{Do compilation? The default is \code{TRUE}. If \code{FALSE}
compilation can be done later via the \code{\link[cmdstanr:model-method-compile]{$compile()}}
method.}

\item{quiet}{(logical) Should the verbose output from CmdStan during
compilation be suppressed? The default is \code{TRUE}, but if you encounter an
error we recommend trying again with \code{quiet=FALSE} to see more of the
output.}

\item{dir}{(string) The path to the directory in which to store the CmdStan
executable (or \code{.hpp} file if using \verb{$save_hpp_file()}). The default is the
same location as the Stan program.}

\item{include_paths}{(character vector) Paths to directories where Stan
should look for files specified in \verb{#include} directives in the Stan
program.}

\item{cpp_options}{(list) Any makefile options to be used when compiling the
model (\code{STAN_THREADS}, \code{STAN_MPI}, \code{STAN_OPENCL}, etc.). Anything you would
otherwise write in the \code{make/local} file.}

\item{stanc_options}{(list) Any Stan-to-C++ transpiler options to be used
when compiling the model. See the \strong{Examples} section below as well as the
\code{stanc} chapter of the CmdStan Guide for more details on available options:
https://mc-stan.org/docs/cmdstan-guide/stanc.html.}

\item{force_recompile}{(logical) Should the model be recompiled even if was
not modified since last compiled. The default is \code{FALSE}.}

\item{seed}{(positive integer) A seed for the (P)RNG to pass to CmdStan.}

\item{output_dir}{(string) A path to a directory where CmdStan should write
its output CSV files. For interactive use this can typically be left at
\code{NULL} (temporary directory) since CmdStanR makes the CmdStan output
(posterior draws and diagnostics) available in \R via methods of the fitted
model objects. The behavior of \code{output_dir} is as follows:
\itemize{
\item If \code{NULL} (the default), then the CSV files are written to a temporary
directory and only saved permanently if the user calls one of the \verb{$save_*}
methods of the fitted model object (e.g.,
\code{\link[cmdstanr:fit-method-save_output_files]{$save_output_files()}}). These temporary
files are removed when the fitted model object is
\link[base:gc]{garbage collected} (manually or automatically).
\item If a path, then the files are created in \code{output_dir} with names
corresponding to the defaults used by \verb{$save_output_files()}.
}}

\item{sig_figs}{(positive integer) The number of significant figures used
when storing the output values. By default, CmdStan represent the output
values with 6 significant figures. The upper limit for \code{sig_figs} is 18.
Increasing this value will result in larger output CSV files and thus an
increased usage of disk space.}

\item{parallel_chains}{(positive integer) The \emph{maximum} number of MCMC chains
to run in parallel. If \code{parallel_chains} is not specified then the default
is to look for the option \code{"mc.cores"}, which can be set for an entire \R
session by \code{options(mc.cores=value)}. If the \code{"mc.cores"} option has not
been set then the default is \code{1}.}

\item{threads_per_chain}{(positive integer) If the model was
\link[cmdstanr:model-method-compile]{compiled} with threading support, the number of
threads to use in parallelized sections \emph{within} an MCMC chain (e.g., when
using the Stan functions \code{reduce_sum()} or \code{map_rect()}). This is in
contrast with \code{parallel_chains}, which specifies the number of chains to
run in parallel. The actual number of CPU cores used use is
\code{parallel_chains*threads_per_chain}. For an example of using threading see
the Stan case study \href{https://mc-stan.org/users/documentation/case-studies/reduce_sum_tutorial.html}{Reduce Sum: A Minimal Example}.}

\item{variables}{(character vector) The variables to include.}
}
\value{
A data frame of posterior summaries.
}
\description{
Not a user-side function. Do not invoke directly.
}
\keyword{internal}
